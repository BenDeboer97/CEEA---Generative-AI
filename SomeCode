"use strict"
class SomeFunction {
  constructor(setMax, setPeriod) {
    if ((typeof setMax != 'number') ||
         (typeof setPeriod != 'number'))
      throw new TypeError("All arguments must be natural numbers.")

    setMax = parseInt(setMax, 10)
    setPeriod = parseInt(setPeriod, 10)

    if ((setMax < 1) || (setPeriod < 1))
      throw new RangeError("All arguments must be natural numbers.")

    this.max = setMax
    this.period = setPeriod

    let readyTs = Date.now()

    this.nextToken = Token.ring(setMax, readyTs)
  }

  throttle(f) {
    return new Promise((resolve, reject) => {
      const wrap = () => {
        try {
          resolve(f())
        } catch (e) {
          reject(e)
        }
      }

      const delay = Math.max(0, this.nextToken.readyAt - Date.now())

      if (delay)
        setTimeout(wrap, delay)
      else
        wrap()

      this.nextToken.readyAt = Date.now() + delay + 50 + this.period * 1000
      this.nextToken = this.nextToken.next
    });
  }
}

class Token {
  static ring(n, readyTs) {
    let first, previous

    for (let i = 0; i < n; i++) {
      let token = new this(readyTs)
      if (!i)
        first = previous = token
      else
        previous = previous.next = token
    }

    return previous.next = first
  }

  constructor(ts) {
    this.readyAt = ts
    this.next = null
  }
}

module.exports = SomeFunction